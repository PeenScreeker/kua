name: build_all

on: workflow_dispatch

jobs:
  windows_gcc:
    name: ${{ matrix.config }} Windows ${{ matrix.arch }} (Vulkan=${{ matrix.vulkan }}, ${{ matrix.c }})
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        arch: [x86, x86_64]
        c: [gcc, clang]
        config: [Debug, Release]
        vulkan: [0, 1]
        include:
          - arch: x86
            msystem: MINGW32
            prefix: mingw-w64-i686
          - arch: x86_64
            msystem: MINGW64
            prefix: mingw-w64-x86_64
          - config: Debug
            rule: debug
          - config: Release
            rule: install
          - arch: x86
            c: clang
            cflags: -D__MINGW_FORCE_SYS_INTRINS # workaround (https://sourceforge.net/p/mingw-w64/bugs/488/)

    defaults:
      run:
        shell: msys2 {0}

    steps:
    - uses: msys2/setup-msys2@v2
      with:
        install: ${{ matrix.prefix }}-binutils ${{ matrix.prefix }}-make ${{ matrix.prefix }}-${{ matrix.c }}
        msystem: ${{ matrix.msystem }}
        path-type: minimal
        release: false
        update: false

    - uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: Build
      run: make ${{ matrix.rule }} -j 8
        ARCH=${{ matrix.arch }}
        BUILD_SERVER=0
        CC=${{ matrix.c }}
        CFLAGS=${{ matrix.cflags }}
        DESTDIR=bin
        USE_RENDERER_DLOPEN=0
        USE_SDL=0
        USE_VULKAN=${{ matrix.vulkan }}

    - uses: actions/upload-artifact@v2
      if: matrix.c == 'gcc' && matrix.config == 'Release'
      with:
        name: windows
        path: bin
        if-no-files-found: error
        retention-days: 5

  windows_msvc:
    name: ${{ matrix.config }} Windows ${{ matrix.arch }} (Vulkan=${{ matrix.vulkan }}, MSVC)
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        arch: [Win32, x64]
        config: [Debug, Release]
        vulkan: [0, 1]
        include:
          - arch: Win32
            name: oDFe
            renderer: renderer
            vulkan: 0
          - arch: x64
            name: oDFe.x64
            renderer: renderer
            vulkan: 0
          - arch: Win32
            name: oDFe.vk
            renderer: renderervk
            vulkan: 1
          - arch: x64
            name: oDFe.vk.x64
            renderer: renderervk
            vulkan: 1

    steps:
    - uses: microsoft/setup-msbuild@v1.0.2

    - uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: Build
      run: |
        msbuild code/win32/msvc2017/${{ matrix.renderer }}.vcxproj -m -p:Configuration=${{ matrix.config }},Platform=${{ matrix.arch }}
        msbuild code/win32/msvc2017/quake3e.vcxproj -m -p:TargetName=${{ matrix.name }},Configuration=${{ matrix.config }},Platform=${{ matrix.arch }}

    # - uses: actions/upload-artifact@v2
    #   if: matrix.config == 'Release'
    #   with:
    #     name: windows_msvc
    #     path: code/win32/msvc2017/output/*.exe
    #     if-no-files-found: error
    #     retention-days: 5
        
  ubuntu:
    name: ${{ matrix.config }} Ubuntu ${{ matrix.arch }} (Vulkan=${{ matrix.vulkan }}, ${{ matrix.c }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        arch: [x86, x86_64]
        c: [gcc, clang]
        config: [Debug, Release]
        vulkan: [0, 1]
        include:
          - config: Debug
            rule: debug
          - config: Release
            rule: install

    steps:
    - name: Install tools
      run: |
        if [ ${{ matrix.arch }} == "x86" ]; then
          sudo dpkg --add-architecture i386
          sudo apt-get -qq update
          sudo apt-get -y install gcc-multilib libcurl4-openssl-dev:i386 mesa-common-dev:i386 libxxf86dga-dev:i386 libxrandr-dev:i386 libxxf86vm-dev:i386 libasound-dev:i386 libpcre3-dev:i386
        elif [ ${{ matrix.arch }} == "x86_64" ]; then
          sudo apt-get -qq update
          sudo apt-get -y install libcurl4-openssl-dev mesa-common-dev libxxf86dga-dev libxrandr-dev libxxf86vm-dev libasound-dev libpcre3-dev
        fi

    - uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: Build
      run: make ${{ matrix.rule }} -j 8
        ARCH=${{ matrix.arch }}
        BUILD_SERVER=0
        CC=${{ matrix.c }}
        DESTDIR=bin
        USE_RENDERER_DLOPEN=0
        USE_SDL=0
        USE_VULKAN=${{ matrix.vulkan }}

    - uses: actions/upload-artifact@v2
      if: matrix.c == 'gcc' && matrix.config == 'Release'
      with:
        name: linux
        path: bin
        if-no-files-found: error
        retention-days: 5

  macos:
    name: ${{ matrix.config }} macOS x86_64 (Vulkan=${{ matrix.vulkan }}, ${{ matrix.c }})
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        c: [gcc, clang]
        config: [Debug, Release]
        vulkan: [0, 1]
        include:
          - config: Debug
            rule: debug
          - config: Release
            rule: install

    steps:
    - name: Install tools
      run: brew install coreutils sdl2 pcre
      # run: |
      #  brew install coreutils
      #  curl -L -o SDL2.dmg https://www.libsdl.org/release/SDL2-2.0.14.dmg
      #  hdiutil mount SDL2.dmg
      #  sudo cp -R "/Volumes/SDL2/SDL2.framework" /Library/Frameworks
      #  hdiutil unmount "/Volumes/SDL2"

    - uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: Build
      run: make ${{ matrix.rule }} -j 8
        BUILD_SERVER=0
        CC=${{ matrix.c }}
        DESTDIR=bin
        INSTALL=ginstall
        USE_RENDERER_DLOPEN=0
        USE_VULKAN=${{ matrix.vulkan }}

    - uses: actions/upload-artifact@v2
      if: matrix.c == 'gcc' && matrix.config == 'Release'
      with:
        name: macos
        path: bin
        if-no-files-found: error
        retention-days: 5
