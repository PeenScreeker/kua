# Multiplatform
# Quake3e SCons Compiling setup
# :::::::::::::::::::::::::::::
# Based on: Quake3 Unix Makefile 
#         | Nov '98 | Zoid <zoid@idsoftware.com>
#         | Loki Hacking by Bernd Kreimeier
#                           Ryan C. Gordon
#                           Rafael Barrero
#                           ioq3 cr3w
# Ported to SCons by:
#   2022 | sOkam! for Opensource Defrag
#
#::::::::::::::::::::::::::::::::::::::
# This file intends to be a multiplatform buildsystem.
# Keep that in mind if you modify it.
# SCons takes some learning, but its way more powerful than Makefiles
#   TODO: Native support for win, macos
#::::::::::::::::::::::::::::::::::::::
#
# Naming Convention:
# ::::::::::::::::::
# cur___  : Current host
# trg___  : Build target
# rls___  : Release
# dbg___  : Debug
# win___  : Windows version
# lnx___  : Linux version
# env___  : Build environment
# src___  : Source code
# obj___  : Object built from source code
# __Name  : Name of X (string)
# __Dir   : Folder containing X
# sc___   : Scons related variable
# *tru*   : Related to Aliases for SCons expected values. i.e: truArch='w', scArch='win32'
# *valid* : Supported by this build system. Not valid = support is not implemented
#::::::::::::::::::::::::::::::::::::::
# Word Order:
#   Organization goes FIRST. Program organization, not idiomatic english.
#     Category -> Thing -> Differentiating Exception 
#     : catThing_excpt
#     Example:
#       English (wrong):     initialize_build_target
#       Organization first:  trgBuild_init
#::::::::::::::::::::::::::::::::::::::
# Case styling:
#   camelCase preferred 
#   PascalCase for classes/constants only, and for SCons builtin methods
#   snake_case discouraged, only for exception management
#   All-caps for SCons environment variables -only- (CCFLAGS, etc)
#     SCons variable -inputs- (defined here, passed to scons) SHOULD be named with snake case exception styling
#::::::::::::::::::::::::::::::::::::::

# Usage and Help
# :::::::::::::::
Help("""
: Action:     command              Description
::::::::::    ::::::::             ::::::::::::
                !cmd : not implemented
: Help:       scons -h             Shows this text.
: Verbose:    !scons -V             Make the output of scons fully verbose: Formatting removed and nothing filtered.
              TEMP: Use V=1        until bugfix. There is a reported issue in SCons. 
: Cores:      scons -j NUM         Use NUM of cores for building. Overwrites the value set in the scripts
: Clean:      scons -c             Cleans default build targets. Doesn't remove folders.
              scons -c NAME        Cleans selected build targets. Doesn't remove folders.
: Build:        
    Default   scons                Builds the targets set in the `build_default` list
    Game      scons game           Builds only the game code (dynamic library), without the engine   (sgame, cgame, ui)
    Debug     scons debug          Builds debug version only     (client+server+game).  Default when `build_default` is empty
    Engine    scons engine         Builds only the engine code, without any game code
    Server    !scons server         Builds only the dedicated server code (ded), without any client code
    Release   scons release        Builds release version only   (client+server+game)
    Distrib   scons distribute     Cross-compiles and builds release versions for all supported platforms.
    All       scons all            Builds all targets (including debug and release versions of both)
: Options:
    Platform  scons p=NAME         Cross-compilation for a platform different than the current host platform
                    platform=NAME   Valid names:                     # todo: darwin
                                    Win64: 'w', 'win'                : SCons 'win32':'64bit'
                                    Win32: 'w32', 'win32'            : SCons 'win32':'32bit'
                                    Linux: 'l', 'lnx', 'linux'       : SCons 'posix':'64bit'
                                    Linux: 'l32', 'lnx32', 'linux32' : SCons 'posix':'32bit'
    Arch      scons arch=NAME      Cross-compilation for an architecture other than the current host arch
                                    Don't use, unless you know what you are doing.     #TODO: x86, arm 
                                    Defaults to x86 or x86_64, if the host platform is of a different bitsize than the one provided. Else current host arch
                                    Uses SCons default names. Valid names: (64bit) 'amd64','x86_64'  (32bit) 'x86','arm'
: Configuration:
    ./scons_local.py              Allows the user to overwrite default configuration variables set it ./lib/scons_config.py
                                   Useful to make permanent changes locally, without losing progress during updates
                                   Copy the template file `./lib/skel/scons_local.py` as `./scons_local.py`, or create a new empty file
""")
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::: 
############################################################


###############
# Helpers & imports
# ::::::::::::::::::
import lib.helper.scons as h
from lib.helper.scons import getLocal, getCur, getCli, getGlob, getBits, isVerbose, BuildObject, BuildInfo
from lib.helper.scons import ARCH, PLAT, BITS, TRG, scPlatforms, validPlatforms, validArchs
import sys; sys.dont_write_bytecode=True  # Do not create bytecode __pycache__ folder
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::: 
############################################################


###############
# Configuration
# ::::::::::::::::
from lib.helper.config_scons import *

# For configuration different than the defaults, without losing changes during updates:
#   Create a new file named "scons_local.py" in the same directory as this one
#   Assign your configuration there
#   The values active in the file will overwrite any values set in lib.scons_config      
if h.exists('scons_local.py'): from scons_local import *

#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::: 
############################################################


###############
# Initialization
# ::::::::::::::::

# Define system
# ::::::::::::::
# Current system
curPlatform    = getCur(PLAT)
curArch        = getCur(ARCH) 
curBits        = getCur(BITS)
if not curPlatform or not curArch:     sys.exit(f'::ERR SCons failed to detect the host system: HOST_OS={curPlatform}, HOST_ARCH={curArch}') 
if curPlatform not in validPlatforms:  sys.exit(f'::ERR Compilation from host platform: {curPlatform}  is not currently supported') 
if curArch     not in validArchs:      sys.exit(f'::ERR Compilation from host arch: {curArch}  is not currently supported') 
## OS
posix  = bool(curPlatform in ['posix'])
win    = bool(curPlatform in ['win32'])
#darwin = bool(curPlatform in ['darwin'])
#arm    = bool(curPlatform in ['arm'])
#arm64  = bool(curPlatform in ['arm64'])

# CLI System
cliPlatform = getCli(PLAT)   # Gets the converted value, not the raw alias input in `p=` or `platform=`
cliArch     = getCli(ARCH) 

# SCons setup
# ::::::::::::
## Verbose
if not isVerbose() and scQuiet: SetOption('no_progress',1)  # Mute SCons progress text on non-verbose mode
if isVerbose(): Progress(': Evaluating  $TARGET\n') # SCons will echo when each file is being evaluated. TODO: Chapter 9.3
## Jobs
scJobs = max(2,int(cores*coresPc))
if cores: SetOption('num_jobs', scJobs)
## Others
Decider(scDecider) # Could be assigned per environment, but using global config instead
SConsignFile(scDir+'/scons-sign')

#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::: 
############################################################


###############
# Source Code
# ::::::::::::
######################
# Client 
#::::::::
srcClient = getGlob(engineDir, clDir+'/*.c' )   # All of these are relative to the src folder. But they won't contain the folder in the string
srcServer = getGlob(engineDir, svDir+'/*.c' )   #   srcDir + clDir+'/file.c'  ==    /absolute/to/src/cldir/file.c
srcCommon = getGlob(engineDir, qcmDir+'/*.c')
srcBot    = getGlob(engineDir, botDir+'/*.c')
# Renderer
srcRendC  = getGlob(engineDir, rcDir+'/*.c')
srcRend1  = getGlob(engineDir, r1Dir+'/*.c') + srcRendC
srcRendV  = getGlob(engineDir, rvDir+'/*.c') + [f for f in srcRendC if f not in [rcDir+'/tr_image.c']]  #rendv = rendv + rendc - rendc_image (rc/tr_image.c)
# Unsupported renderer
srcRend2  = getGlob(engineDir, r2Dir+'/*.c') + srcRendC  # Disabled. Renderer2 is not used
#objRend2str = """ %s/rend2/glsl/bokeh_fp.o, ETC, ETC """ % B  #todo: How do we compile *.glsl into *.o ?
## Libraries
srcJpeg   = getGlob(engineDir, jpgDir+'/*.c')
srcSdl    = getGlob(engineDir, sdlDir+'/*.c')
## Platform Specific
srcUnix   = getGlob(engineDir, unxDir+'/*.c')
srcWin    = getGlob(engineDir, winDir+'/*.c')
## Filters: Remove
srcServer_rankings    = [svDir+'/sv_rankings.c']
srcCommon_VMplatforms = [qcmDir+'/vm_x86.c', qcmDir+'/vm_armv7l.c', qcmDir+'/vm_aarch64.c']
## Filters: Add
### Linux
srcLinux = [
  unxDir+'/unix_main.c',
  unxDir+'/unix_shared.c',
  unxDir+'/linux_signals.c',
  ]
srcLinux_nonsdl = [
  unxDir+'/linux_glimp.c', 
  unxDir+'/linux_qgl.c',
  unxDir+'/linux_snd.c',
  unxDir+'/x11_dga.c',
  unxDir+'/x11_randr.c',
  unxDir+'/x11_vidmode.c',
  ]
srcLinux_qvk = [unxDir+'/linux_qvk.c']
### Windows
srcWin = [
  winDir+'/win_main.c',
  winDir+'/win_shared.c',
  winDir+'/win_syscon.c',
  #winDir+'/win_resource.o', #FIXME: This is a .rc file, converted to .o with windres
  ]
srcWin_nonsdl = [
  winDir+'/win_gamma.c',
  winDir+'/win_glimp.c',
  winDir+'/win_input.c',
  winDir+'/win_minimize.c',
  winDir+'/win_qgl.c',
  winDir+'/win_snd.c',
  winDir+'/win_wndproc.c',
  ]
srcWin_qvk = [winDir+'/win_qvk.c']
### VM Platforms
srcVM_x86  = [qcmDir+'/vm_x86.c']
srcVM_arm  = [qcmDir+'/vm_armv7l.c']
srcVM_aa64 = [qcmDir+'/vm_aarch64.c']
### Libraries
srcCurl = [clDir+'/cl_curl.c']
## Shared Library dependencies
srcShlib = [
  qcmDir+'/q_math.c',
  qcmDir+'/q_shared.c',
  ]

# Target Sources: Client Engine
#::::::::::::::::::::::::::::::
srcEngine_cl = [f for f in srcClient if f not in srcCurl] \
             + [f for f in srcCommon if f not in srcCommon_VMplatforms] \
             + [f for f in srcServer if f not in srcServer_rankings] \
             + srcBot \
             + srcCurl + srcSdl
## Add Platform Specific
srcEngine_cl_lnx  = srcEngine_cl + srcLinux
srcEngine_cl_win  = srcEngine_cl + srcWin
if use_local_jpeg:  srcEngine_cl_win += srcJpeg  # Always using system libraries. Linking local jpeg on win, libjpeg binaries are hard to find
## Add Renderers
srcEngine_gl1_lnx = srcEngine_cl_lnx + srcRend1
srcEngine_gl1_win = srcEngine_cl_win + srcRend1
#srcEngine_gl2_lnx = srcEngine_cl_lnx + srcRend2 + srcRend2str
#srcEngine_gl2_win = srcEngine_cl_win + srcRend2 + srcRend2str
srcEngine_vk_lnx  = srcEngine_cl_lnx + srcRendV + srcLinux_qvk  #todo: use_vulkan_api filter needed?
srcEngine_vk_win  = srcEngine_cl_win + srcRendV + srcWin_qvk    #todo: use_vulkan_api filter needed?
if not use_opengl and not use_vulkan and not use_opengl2: sys.exit('::ERR No renderer has been defined.')
## Add VM & local libs
#if compile_VM:
#  if posix or win:       srcEngine_cl += srcVM_x86
#  if arm:                srcEngine_cl += srcVM_arm
#  if arm64:              srcEngine_cl += srcVM_aa64


# Target Sources: Game Client
#:::::::::::::::::::::::::::::
srcCGame = getGlob(gameDir, cgDir+'/*.c')
## Filter: Add
srcCGame_shared = [
  sgDir+'/bg_misc.c',
  sgDir+'/bg_pmove.c',
  sgDir+'/bg_slidemove.c',
  sgDir+'/bg_lib.c',
  ]
## Filters: Apply
srcGame_cg = srcCGame + srcCGame_shared + srcShlib


# Target Sources: Game Server
#::::::::::::::::::::::::::::
srcSGame = getGlob(gameDir, sgDir+'/*.c')
## Filter: Remove
srcSGame_rankings = [sgDir+'/g_rankings.c']
## Filters: Apply
srcGame_sg = [f for f in srcSGame if f not in srcSGame_rankings] + srcShlib


# Target Sources: Game UI
#:::::::::::::::::::::::::
srcUI = getGlob(gameDir, uiDir+'/*.c')
## Filter: Add
srcUI_bg = [
  sgDir+'/bg_misc.c',
  sgDir+'/bg_lib.c',
  ]
## Filter: Remove
srcUI_rankings = [
  uiDir+'/ui_login.c',
  uiDir+'/ui_rankings.c',
  uiDir+'/ui_rankstatus.c',
  uiDir+'/ui_signup.c',
  uiDir+'/ui_specifyleague.c',
  uiDir+'/ui_spreset.c',
  ]
## Filters: Apply
srcGame_ui = [f for f in srcUI if f not in srcUI_rankings] + srcUI_bg + srcShlib

#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::: 
############################################################


###############
# Construction Data
#:::::::::::::::::::

# Base: Build Data
#::::::::::::::::::
base = BuildObject()  # Don't use base.setup(). This just stores build data     # Superclass possible, but #todo(maybe)
## Output data
base.bindir   = binDir  # Folder where the binaries will be created
## Compiler
### CC FLAGS
base.ccflags  = CCFLAGS_base
base.ccflags += [
      # Default in Q3 makefile:
    '-Wall','-Wstrict-prototypes', 
    #'-Wno-unused-result',  # I don't think this is needed. Mark functions as void instead??
    #'-pipe',               # Used to be a performance increase back in the day. Probably unnoticeable now, and it can create issues
    #'-Wimplicit',          # Default in Q3, but implied by -Wall
    '-m64',                 # 64bit math. q3e has it only on win, but should be base  #todo: support for 32bit?
      # ioq3 only
    '-fno-strict-aliasing', #TODO: Does this break odfe?
      # New by sOkam:
    #'-std=c99', '-Wpedantic', '-pedantic', #'-pedantic-errors', # Enforce ISO C89 standard. Probably want 99
    #'-Wdouble-promotion',  # Warn when a float is promoted to double
      # Recommended in tutorial:
    #'-Wextra',#'-Werror',
    #'-Wmissing-prototypes','-Wmisleading-indentation','-Wduplicated-cond','-Wold-style-definition',
    #'-Wconversion','-Wshadow','-Winit-self','-Wfloat-equal','-Wcast-align=strict',
    #'-Wformat-overflow=2','-Wformat-truncation=2', #'-Wformat', # Implied in -Wall
    # '-fdiagnostics-format=text','-fdiagnostics-minimum-margin-width=5',#'-Wwrite-strings',
    ]
### General Defines
base.defines  = DFLAGS_base
base.defines += ['BOTLIB']
### Libraries
#### Defines
#### Linking
base.libs     = LIBS_base
base.libs    += ['m']         # -lm
base.ldflags  = LDFLAGS_base
base.ldflags += ['-Wl,--gc-sections', '-fvisibility=hidden']
#### Include Paths
base.ccpath   = CCPATH_base
base.parse    = PARSE_base # Will be setup as env.ParseConfig('value')


# Release: Build Data
#:::::::::::::::::::::
rls = BuildObject()   # Don't use rls.setup(). This just stores build data
## Compiler
### Compiler FLAGS
rls.ccflags += CCFLAGS_rls
rls.ccflags += [
    '-O2',                 # Perform all optimizations that do not involve a space-speed tradeoff. Default -O0
    '-fvisibility=hidden', # Make all symbols hidden, unless specified (private, static, public, etc)]
    '-s',                  # Strip all symbols from the binary
    #'-ffast-math',         # Less precise, but faster, math
    ]  #todo: Test and research -O3 and -Ofast. Could be faster than -O2. ** q3e -ffast-math only win. ioquake3 -O3 and -ffast-math everywhere
rls.ctype = 'release'
### General Defines
rls.defines += ['NDEBUG']


# Debug: Build Data
#::::::::::::::::::
dbg = BuildObject()    # Don't use dbg.setup(). This just stores build data
## Compiler
dbg.ctype = 'debug'
### Compiler FLAGS
dbg.ccflags += CCFLAGS_dbg
dbg.ccflags += [
    '-Og', # Optimize -O1, but without incompatible debugging flags. Best option for fast building + debug
    '-g3', # Generate Debug information, including all extras
    ]
### General Defines
dbg.defines += ['DEBUG', '_DEBUG']


# Linux: Build Data
#:::::::::::::::::::
lnx = BuildObject()     # Don't use lnx.setup(). This just stores build data
## Environment & System
lnx.plat = 'posix'
lnx.arch = 'x86_64'
## Compiler
#### Linking
lnx.libs    += ['dl']        # -ldl
lnx.ldflags += ['-Wl,--hash-style=both']
#### Include Paths
lnx.ccpath   = ['/usr/include', '/usr/local/include']  #TODO: This shouldn't be needed, but.... is it?


# Windows: Build Data
#:::::::::::::::::::::
win = BuildObject()      # Don't use win.setup(). This just stores build data
## Environment & System
win.plat     = 'win32'
win.arch     = 'x86_64'
## Compiler
win.defines += ['WINVER=0x501']  # Require WinXP or later
win.libs     = ['wsock32','gdi32','winmm','ole32','ws2_32','psapi','comctl32']
win.ldflags  = ['-mwindows', '-Wl,--dynamicbase', '-Wl,--nxcompat',]

# def DO_WINDRES (trg, src):  #TODO: How do we add Icon, q3.manifest and the other data defined in code/win32/win_resource.rc ??
#   WINDRES_cmd -i src -o trg


# Client: Build Data
#::::::::::::::::::
cl         = base.clone()
## Output data
cl.bintype = 'bin'
### Custom compiler name (non verbose)
cl.cStr    = 'CC'
cl.lStr    = 'LD'
## Source code
cl.srcdir  = engineDir 
### General Defines
cl.defines += ['NO_VM_COMPILED']
if baseDir:         cl.defines += [f'DEFAULT_BASEDIR="{baseDir}"']
if use_vulkan_api:  cl.defines += [ 'USE_VULKAN_API']
### Libraries
#### Defines
# We are not using local headers at all. We use system libraries always. And we are not using dlopen versions of any
#if use_local_headers:  client.defines += ['USE_LOCAL_HEADERS=1']  #TODO: Revisit this after first rls.game playtest
cl.defines += ['USE_PCRE']
cl.defines += ['USE_CURL']
#### Linking
cl.libs    += ['SDL2']
cl.libs    += ['pcre']
cl.libs    += ['curl']
cl.libs    += ['jpeg']

## Linux
clLnx          = cl.merge(lnx)
clLnx.src      = srcEngine_gl1_lnx
clLnx.binname = f'{cName}{"."+clLnx.arch if clLnx.arch in ["x86"] else ".x64"}'
### Defines
clLnx.defines += ['USE_ICON']
clLnx.defines += ['USE_SYSTEM_JPEG']
### Include Paths
if posix:      clLnx.parse += ['pkg-config --silence-errors --cflags-only-I sdl2']
# clLnx.defines += [f'ARCH_STRING="{clLnx.arch}"']
## Create BuildObjects: Release and Debug
clLnx_rls = clLnx.merge(rls)
clLnx_dbg = clLnx.merge(dbg)

## Windows
clWin          = cl.merge(win)
clWin.src      = srcEngine_gl1_win
clWin.binname = f'{cName}{"-"+clWin.arch if clWin.arch in ["x86"] else "-x64"}'
### Defines
clWin.defines += ['USE_ICON']
if not use_local_jpeg: clWin.defines += ['USE_SYSTEM_JPEG']
# clWin.defines += [f'ARCH_STRING="{clWin.arch}"']
# SDL extras
if posix:      clWin.parse += ['pkg-config --silence-errors --cflags sdl2 | sed "s/-Dmain=SDL_main//"']
# CURL extras
clWin.defines += ['CURL_STATICLIB']
clWin.libs    += ['wldap32','crypt32'] # Curl support libs
clWin.ccpath  += [engineDir+'/libcurl/windows/include']
clWin.libpath += [engineDir+'/libcurl/windows/mingw/lib64']
# PCRE extras
clWin.ccpath  += [engineDir+'/lib/pcre/windows/include']
clWin.libpath += [engineDir+'/lib/pcre/windows/mingw/lib64']
## Create BuildObjects: Release and Debug
clWin_rls = clWin.merge(rls)
clWin_dbg = clWin.merge(dbg)


# Game Client: Build Object
#:::::::::::::::::::::::::::
cg         = base.clone()
## Source code
cg.src     = srcGame_cg
cg.srcdir  = gameDir 
# Custom compiler name (non verbose)
cg.cStr    = 'cgame_CC'
cg.lStr    = 'cgame_LD'
# Output data
cg.bintype = 'lib'
# Add defines
#cg.defines += ['CGAME']

# Linux
cgLnx = cg.merge(lnx)
cgLnx.binname = f'cgame{cgLnx.arch}'
cgLnx.defines += [f'ARCH_STRING="{cgLnx.arch}"']
cgLnx_rls = cgLnx.merge(rls)
cgLnx_dbg = cgLnx.merge(dbg)
# Windows
cgWin = cg.merge(win)
cgWin.binname = f'cgame{cgWin.arch}'
cgWin.defines += [f'ARCH_STRING="{cgWin.arch}"']
cgWin_rls = cgWin.merge(rls)
cgWin_dbg = cgWin.merge(dbg)


# Game Server: Build Object
#:::::::::::::::::::::::::::
sg         = base.clone()
## Source code
sg.src     = srcGame_sg
sg.srcdir  = gameDir 
# Custom compiler name (non verbose)
sg.cStr    = 'sgame_CC'
sg.lStr    = 'sgame_LD'
# Output data
sg.bintype = 'lib'
# Add defines
#sg.defines += ['QAGAME']

# Linux
sgLnx = sg.merge(lnx)
sgLnx.binname = f'qagame{sgLnx.arch}'
sgLnx.defines += [f'ARCH_STRING="{sgLnx.arch}"']
sgLnx_rls = sgLnx.merge(rls)
sgLnx_dbg = sgLnx.merge(dbg)
# Windows
sgWin = sg.merge(win)
sgWin.binname = f'qagame{sgWin.arch}'
sgWin.defines += [f'ARCH_STRING="{sgWin.arch}"']
sgWin_rls = sgWin.merge(rls)
sgWin_dbg = sgWin.merge(dbg)


# Game UI: Build Object
#:::::::::::::::::::::::::::
ui         = base.clone()
## Source code
ui.src     = srcGame_ui
ui.srcdir  = gameDir 
# Custom compiler name (non verbose)
ui.cStr    = 'ui_CC'
ui.lStr    = 'ui_LD'
# Output data
ui.bintype = 'lib'
# Add defines
#ui.defines += ['UI']

# Linux
uiLnx = ui.merge(lnx)
uiLnx.binname = f'ui{uiLnx.arch}'
uiLnx.defines += [f'ARCH_STRING="{uiLnx.arch}"']
uiLnx_rls = uiLnx.merge(rls)
uiLnx_dbg = uiLnx.merge(dbg)
# Windows
uiWin = ui.merge(win)
uiWin.binname = f'ui{uiWin.arch}'
uiWin.defines += [f'ARCH_STRING="{uiWin.arch}"']  #TODO: Fix Memory Address nonsense. This is already defined???
uiWin_rls = uiWin.merge(rls)
uiWin_dbg = uiWin.merge(dbg)


# Setup BuildObjects with SCons
#:::::::::::::::::::::::::::::::
## Engine: Client
clWin_rls.setup()
clWin_dbg.setup()
clLnx_rls.setup()
clLnx_dbg.setup()
## Game: Client
cgLnx_rls.setup()
cgLnx_dbg.setup()
cgWin_rls.setup()
cgWin_dbg.setup()
## Game: Server
sgLnx_rls.setup()
sgLnx_dbg.setup()
sgWin_rls.setup()
sgWin_dbg.setup()
## Game: UI
uiLnx_rls.setup()
uiLnx_dbg.setup()
uiWin_rls.setup()
uiWin_dbg.setup()


#############################################################################
# DEDICATED SERVER
#############################################################################
#srcDed = """
#  # Server
#    # Missing sv_rankings.c
#  # Common
#    # Missing qcommon/puff.c
#    # Missing vm_ Platforms
#  # Botlib
#  """ % binDir

#if mingw: srcDed += srcWin
#else:     srcDed += srcLinux
#if compile_VM:
#  if trgArch in ['x86', 'x86_64']:  srcDed += srcVM_x86
#  if arm:              srcDed += srcVM_arm
#  if trgArch == 'aarch64':          srcDed += srcVM_aa64

# Server Objects
#::::::::::::::::
#DO_AS      ( binDir/ded/%.o,  asmDir/%.s )
#DO_DED_CC  ( binDir/ded/%.o,  svDir/%.c  )
#DO_DED_CC  ( binDir/ded/%.o,  qcmDir/%.c )
#DO_DED_CC  ( binDir/ded/%.o,  botDir/%.c )
## Platform Specific
#DO_DED_CC  ( binDir/ded/%.o,  unxDir/%.c )
#DO_DED_CC  ( binDir/ded/%.o,  winDir/%.c )
#DO_WINDRES ( binDir/ded/%.o,  winDir/%.rc)

# Server Binaries
#::::::::::::::::
#binDir/trgDed: objDed
#	CC_cmd -o THIS_trgFilename objDed LDFLAGS_base
#compile(lnkDir+'/'+trgDed, env=rls, cStr='DED_CC')

#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::: 
############################################################


#########
# Keywords
#::::::::::::::::::
###############################
#build_server = build_server or bool(server in COMMAND_LINE_TARGETS)
trgBuildList = getCli(TRG)

# # Compile Keywords
# ## Target assignment
# # engine
trgEngine_ld = [clLnx_dbg.trg]
trgEngine_lr = [clLnx_rls.trg]
trgEngine_wd = [clWin_dbg.trg]
trgEngine_wr = [clWin_rls.trg]
# # server
# #TODO add server (here and trgAll)
# # game
trgGame_ld   = [cgLnx_dbg.trg, sgLnx_dbg.trg, uiLnx_dbg.trg]
trgGame_lr   = [cgLnx_rls.trg, sgLnx_rls.trg, uiLnx_rls.trg]
trgGame_wd   = [cgWin_dbg.trg, sgWin_dbg.trg, uiWin_dbg.trg]
trgGame_wr   = [cgWin_rls.trg, sgWin_rls.trg, uiWin_rls.trg]
# # all
trgAll       = [trgEngine_ld, trgEngine_lr, trgEngine_wd, trgEngine_wr, 
                trgGame_ld, trgGame_lr, trgGame_wd, trgGame_wr]

## Groups
### Current Platform
# engine
if posix: Alias('engine', trgEngine_lr)
elif win: Alias('engine', trgEngine_wr)
if posix: Alias('engine-dbg', trgEngine_ld)
elif win: Alias('engine-dbg', trgEngine_wd)
Alias('engine-dist', trgEngine_lr + trgEngine_wr)
# game
if posix: Alias('game', trgGame_lr)
elif win: Alias('game', trgGame_wr)
if posix: Alias('game-dbg', trgGame_ld)
elif win: Alias('game-dbg', trgGame_wd)
Alias('game-dist', trgGame_lr + trgGame_wr)
# both
Alias('release', ['engine', 'game'])
Alias('debug', ['engine-dbg', 'game-dbg'])
Alias('distribute', ['engine-dist', 'game-dist'])  #TODO add server
# all
Alias('all', trgAll)

## Keywords  : build count
#  !! TODO:   All keywords are aliases !!!
#  game       = 1plat * 3target * 1perf   =  3obj   # Release Game   locally   ** #1
#  debug      = 1plat * 5target * 1perf   =  5obj   # For development locally  ** #2 
#  game-dist  = 2plat * 3target * 1perf   =  6obj   # Mod only                 ** TOP priority
#  release    = 1plat * 5target * 1perf   =  5obj   # For best performance
#! install    = 1plat * 5target * 1perf   =  5obj   # Auto installing release
#  engine     = 1plat * 1target * 1perf   =  1obj   # Release Engine locally
#! server     = 1plat * 1target * 1perf   =  1obj   # Release Server locally
#  distribute = 2plat * 5target * 1perf   = 10obj   # Engine+mod
#  all        = 2plat * 5target * 2perf   = 20obj   # Engine+mod


# Default targets
#::::::::::::::::::
# What to build when no targets are selected (additive, doesn't replace, list or strings)
if not build_default:  Default('debug')       # Build debug if list is empty
else:                  Default(build_default) # Assign the list to SCons build defaults
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::: 
############################################################


###########
# BuildInfo
#::::::::::::::::::
###############################
info = BuildInfo(name=cName, version=version, bindir=binDir, baseflags=base.ccflags, rlsflags=rls.ccflags, dbgflags=dbg.ccflags)
if not (GetOption('help') or GetOption('clean')): info.print()
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::: 
############################################################


##############
# Import guard
#::::::::::::::::::
if __name__=='__main__': import sys; sys.exit(f'::MODULE-ERROR: {__file__} is not meant to be executed on its own')
############################################################
